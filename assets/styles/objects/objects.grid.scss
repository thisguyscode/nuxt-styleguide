/* ==========================================================================
   # GRID
========================================================================== */

/**
 *  ___NOTES___
 */



/* Dependencies
========================================================================== */

// VALUES
@import "~assets/styles/values/values.breakpoints";
@import "~assets/styles/values/values.sizes";

// TOOLS
@import "node_modules/sass-mq/mq";





/* Variables
========================================================================== */

$widths-delimiter: \/;
$breakpoint-delimiter: -at-;
$fractions: 1 2 3 4 5;
$offsets: false;





/* Base class
========================================================================== */

.grid {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
  list-style: none;
  margin: 0;
  padding: 0;
}





/* Cell class
========================================================================== */

.grid__cell {
  flex-grow: 1;
  flex-shrink: 1;
}





/* Grid modifiers
========================================================================== */

.grid--flex-cells {
  > .grid__cell {
    display: flex;
  }
}


.grid--align-stretch {
  align-items: stretch;
}


.grid--no-wrap {
  flex-wrap: nowrap;
}


.grid--top {
  align-items: flex-start;
}


.grid--bottom {
  align-items: flex-end;
}


.grid--center {
  align-items: center;
}


.grid--justify-center {
  justify-content: center;
}


.grid--fit {
  > .grid__cell {
    flex-grow: 1;
  }
}


.grid--full {
  > .grid__cell {
    flex-grow: 0;
    flex-shrink: 0;
    flex-basis: 100%;
  }
}





/* Cell modifiers
========================================================================== */

.grid__cell--shrink {
  flex-grow: 0;
  flex-shrink: 1;
}


.grid__cell--top {
  align-self: flex-start;
}


.grid__cell--bottom {
  align-self: flex-end;
}


.grid__cell--center {
  align-self: center;
}


.grid__cell--auto-size {
  flex: auto;
}





/* Cell width MIXIN
========================================================================== */

/**
 *  A mixin to spit out our width classes. Pass in the columns we want the
 *  widths to have, and an optional suffix for responsive widths. E.g. to create
 *  thirds and quarters for a small breakpoint:
 *
 *    @include widths(3 4, -sm);
 */

@mixin widths($columns, $breakpoint: null) {
  
  // Loop through the number of columns for each denominator of our fractions.
  @each $denominator in $columns {

    // Begin creating a numerator for our fraction up until we hit the
    // denominator.
    @for $numerator from 1 through $denominator {

      @if $numerator != $denominator {
        // Build a class in the format `.grid--1/2-at-<breakpoint>`.
        .grid--#{$numerator}#{$widths-delimiter}#{$denominator}#{$breakpoint} {
          > .grid__cell {
            flex-grow: 0;
            flex-shrink: 0;
            flex-basis: ($numerator / $denominator) * 100%;
          }
        }
        // Build a class in the format `.grid__cell--1/2-at-<breakpoint>`.
        .grid__cell--#{$numerator}#{$widths-delimiter}#{$denominator}#{$breakpoint} {
          &#{&} {
            flex-grow: 0;
            flex-shrink: 0;
            flex-basis: ($numerator / $denominator) * 100%;
          } 
        }
      }

      @if ($offsets == true) {

        /**
          *  1. Reset any leftover or conflicting `left`/`right` values.
          */

        // Build a class in the format `.push-1/2[@<breakpoint>]`.
        .push-#{$numerator}#{$widths-delimiter}#{$denominator}#{$breakpoint} {
          position: relative !important;
          right: auto !important; /* [1] */
          left: ($numerator / $denominator) * 100% !important;
        }

        // Build a class in the format `.pull-5/6[@<breakpoint>]`.
        .pull-#{$numerator}#{$widths-delimiter}#{$denominator}#{$breakpoint} {
          position: relative !important;
          right: ($numerator / $denominator) * 100% !important;
          left: auto !important; /* [1] */
        }

      }

    }

  }

}
 
  
  
  
  
/* Register standard cell width classes
========================================================================== */

@include widths($fractions);





/* Register responsive cell width classes
========================================================================== */

@if (variable-exists(mq-breakpoints)) {
  
  @each $bp-name, $bp-value in $mq-breakpoints {

    @include mq($from: $bp-name) {
      @include widths($fractions, #{$breakpoint-delimiter}#{$bp-name});
    }

  }

}
